	.TITLE	'ROBO-RAMA GAME PROGRAM TRAIN TYPE GUYS'
	.WIDTH	132
	.OPTION	B,D,L,T
	.MNOLIST
	
;
; INITIATED:		 APRIL 13,1989
; MODIFIED:		 !
; SOFTWARE:
;
; COPYRIGHT (C) 1989 WILLIAMS ELECTRONICS GAMES, INC.
;
;
; GET THE SYSTEM STUFF

	.INCLUDE	"MPROC.EQU"		;MPROC EQUATES
	.INCLUDE	"DISP.EQU"		;DISPLAY PROC. EQUATES
	.INCLUDE	"\VIDEO\SYS\SYS.INC"	;Z UNIT SYSTEM EQUATES
	.INCLUDE	"\VIDEO\SYS\MACROS.HDR"	;MACROS DEFINITIONS
	.INCLUDE	"IMGTBL.GLO"
	.INCLUDE	"ROBO.EQU"
;
;SYMBOLS EXTERNALLY DEFINED
;
	.REF	BEGIN_OBJ,XYSKOBJ,SET_GATE_2
	.REF	DELPAL,DELOBJ,SCRADD2,P1DATA,PEXPLSND,ONESND,FRANIM
	.REF	BEGIN_OBJ2,RANGRAND,EHALT,RANDPER,BOMBSND
	.REF	GETCOS,GETSIN,STFOBJ,INSOBJ,GPALOBJ,ADJSTWTL
	.REF	SCRTSTG,ANI
	.REF	CEXSND1
	.REF	KILL_PLYR
	.REF	SCRADD2
	.REF	EXISTP
	.REF	KILALL
	.REF	SHAKER
	.REF	NOBONSND,ADDPCS2
	.REF	BULLRSND
;
;SYMBOLS DEFINED IN THIS FILE
;
	.DEF	STRT_TRAIN
	.DEF	HSNKHIT
	.DEF	KILL_PC
	.DEF	KILL_SBULL
	.DEF	KILL_SPOD
	.DEF	GET_SEGG
	.DEF	ANIXY
;
;EQUATES FIRST ORIGINATED IN THIS FILE
;
NUMPCS	.EQU	14		;NUMBER OF SEGMENTS IN SNAKE
HEDHITS	.EQU	1		;MAXIMUM HITS SNAKE HEAD CAN TAKE  
PODK	.EQU	>1A00		;POD VELOCITY CONSTANT
MAXVEL	.EQU	PODK*14		;MAXIMUM POD VELOCITY
;
;

;UNINITIALIZED RAM DEFINITIONS
;
;DATA STRUCTURE OF MASTER CREATE PROCESS
;
SNKPRC	.EQU	PDATA		;UHL
;
;DATA STRUCTURE OF MASTER PIECE POINTER
;
STHETA	.EQU	PDATA	        ;SHL		;CURRENT PROGRESSION
SDELTA	.EQU	PDATA+32	;SHL		;DELTA ANGLE
SNKXVEL	.EQU	SDELTA+32	;SHL
SNKYVEL	.EQU	SNKXVEL+32	;SHL
SNKTHTA	.EQU	SNKYVEL+32	;UHB
SNKDIR	.EQU	SNKTHTA+8	;UHB
SNKOBJ	.EQU	SNKDIR+8	;UHL
SNKHED	.EQU	SNKOBJ+32	;UHL	;SNAKE HEAD PTR
SNKTAIL .EQU	SNKHED+32	;UHL	;SNAKE TAIL PTR
SNKWALL	.EQU	SNKTAIL+32	;UHB	;LAST WALL STRUCK

;
;SNAKE INDIVIDUAL PIECES STRUCTURE
;
SNKNUM	.EQU	PDATA		;UHB
SNKPTR	.EQU	SNKNUM+8	;UHL	;32 BIT TRAM PTR
SNKEXP	.EQU	SNKPTR+32	;UHB
SHITS	.EQU	SNKEXP+8 	;UHB
SNKDIE	.EQU	SHITS+8		;UHB
SNKSEP	.EQU	SNKDIE+8	;UHB

;STRUCTURE FOR SNAKE HEAD BULLET

ANITIKS .EQU	PDATA		;UHB
;

;STRUCTURE FOR SNAKE PODS

ATIKS 	.EQU	PDATA		;UHB


;
;UNINITIALIZED RAM DEFINITIONS
;
	.BSS	TRAM1,32*(NUMPCS+1)
	.BSS	TRAM2,32*(NUMPCS+1)
	.BSS	TRAM3,32*(NUMPCS+1)
	.BSS	TRAM4,32*(NUMPCS+1)
	.BSS	TRAM5,32*(NUMPCS+1)
	.BSS	TRAM6,32*(NUMPCS+1)
	.BSS	TRNUM,16
	.BSS	FIRECNT,8
	.BSS	SNKSTE,8
	.BSS	PODCNT,8   		;CURRENT NUMBER OF ACTIVE PODS
	.BSS	EGGCNT,8		;CURRENT NUMBER OF EGGS
	.BSS	GRPCNT,8
	.BSS	SNKINA,8
	.BSS	BONUM,8
	.BSS	EVENT,8
	.BSS	PODSTAT,8
	.BSS	PLRYOFF,16
	.BSS	PLRXOFF,16
	.BSS	SNKDOOR,8


TRNRAM:	.LONG	TRAM1,TRAM2,TRAM3,TRAM4,TRAM5,TRAM6
SX:	.LONG	-080000H,01980000H,0C40000H,0C40000H
SY:	.LONG	0760000H,0760000H,-2F0000H,01080000H
;
IMGCNT:
	.WORD	0,2,3,4,5,5,5,5,5,5,5,4,3,2,1  

STRT_TRAIN:
	MOVE	A13,A9			
	CREATE	CHSRPID,SNKLGC
	MOVE	A0,*A13(SNKPRC),L
	MOVE	@TRNUM,A2,W
	CMPI	5,A2
	JRLE	DO
	DIE
DO:
	MOVK	1,B0
	MOVK	4,B1
	CALLA	RANGRAND
	MOVB	@SNKDOOR,A1
	CMP	A0,A1
	JRZ	DO
	MOVB	A0,@SNKDOOR
ALLSET:
	MOVE	A0,A8
	MOVE	*A13(SNKPRC),A1,L
	MOVB	A0,*A1(SNKDIR)
	MOVI	55,A1		;OPEN TIME
	CALLA	SET_GATE_2
;
	INC	A2
	MOVE	A2,@TRNUM
	DEC	A2
	SLL	5,A2
	ADDI	TRNRAM,A2
	MOVE	*A2,A11,L
C1	SLEEP	1
	MOVE	*A13(SNKPRC),A1,L
	MOVE	*A1(SNKOBJ),A0,L
	JRZ	C1
	MOVE	A0,*A11,L

	MOVI	NUMPCS,A0
;
	MOVE	A0,A9
	MOVK	1,A10
LPA:
	MOVE	A9,A2
	MOVE	*A13(SNKPRC),A9,L 	;TRANSFER PROCESS LINK TO NEXT PROCESS
	CREATE	CHSRPID,TRAIN
	MOVE	A2,A9
	INC	A10
	CMP	A9,A10

	JRLE	LPA
	DIE

TRAIN:
	DEC	A8
	SLL	5,A8
	MOVI	SX,A0
	ADD	A8,A0
	MOVE	*A0,A0,L		;X
	ADDI	SY,A8
	MOVE	*A8,A1,L		;Y
	MOVI	tail5,A2		;ASSUME HEAD IMAGE
	MOVI	158,A3			;PRIORITY
	MOVI	CLSENMY|TYPHSNK,A5	;ASSUME HEAD ID
	CMPI	1,A10
	JRZ	SETHEAD
	MMTM	SP,A9,A11
	MOVI	IMGCNT,A9
	MOVE	A10,A11
	SLL	4,A11
	ADD	A11,A9
	MOVE	*A9,A9,W			;BODY SEGMENT HIT COUNT
	MOVB	A9,*A13(SHITS)
	MOVI	SEXPAND,A8
	SLL	5,A9
	ADD	A9,A8
	MOVE	*A8,A2,L
	SRL	1,A9
	ADDI	SLPTIME,A9
	MOVE	*A9,A9,W
	MOVB	A9,*A13(SNKSEP)
	MMFM	SP,A9,A11
	MOVI	158,A3	       		;CORRECT FOR BODY SEGMENT Z POS.
	MOVI	CLSENMY|TYPTRAIN,A5
SETHEAD:
	MOVI	DMAWNZ|M_FLIPH,A4	 ;NON-ZERO VALUE
	CLR	A6	
	CLR	A7
	CALLA	BEGIN_OBJ
	CMPI	1,A10
	JRNZ	NOTIT
	MOVE	A8,*A9(SNKHED),L
NOTIT:
	CMPI	NUMPCS,A10
	JRNZ	NOTAIL
	MOVE	A8,*A9(SNKTAIL),L
NOTAIL:
	MOVE	A10,A0
	MOVB	A0,*A13(SNKNUM)
	MOVE	A11,*A13(SNKPTR),L
	SLL	5,A0
;A11=TRAM PTR
	ADD	A11,A0
	MOVE	A8,*A0,L
;
;INIT RAM FOR THIS PROCESS
;
	CLR	A0
	MOVB	A0,*A13(SNKEXP)
	MOVB	A0,*A13(SNKDIE)
	SLEEP	2
;
LPTP:
	MOVE	A10,A1
LPTP2	DEC	A1
	MOVE	A1,A0
	SLL	5,A0
	ADD	A11,A0
	MOVE	*A0,A0,L		;OBJ TO SK
	JRZ	LPTP2
	CMPI	1,A10
	JRNZ	NOTHEAD
;
NOTHEAD:
	CALLR	PLTLINE
	MOVE	A5,*A8(OXVEL),L
	MOVE	A6,*A8(OYVEL),L
;
;CONSTANT HEAD ANIMATION
;
EX:
;SNKEXP WILL ONLY BE TRUE IF THIS IS A HEAD PROCESS
;EXPLODE HEAD!
	MOVB	*A13(SNKEXP),A0
	JRZ	NODIE
	JRUC 	EXPLDALL
	
NODIE:
	MOVB	*A13(SNKSEP),A0		;VELOCITY UPDATE RATE
	CALLA	PRCSLP			;MAINTAINS PIECE SEPARATION
	JRUC	LPTP
;
; SNKLGC - SLITHER SNAKE WITHIN CONFINEMENTS OF ARENA
;
SNKLGC:
	MOVI	STIMEPID,A0
	CLR	A1
	NOT	A1
	CALLA	EXISTP
	JRNZ	NOBTIME			;BR = TIMER ALREADY IN PLACE	
	CREATE	STIMEPID,BTIMER		;STARTUP BONUS TIMER
NOBTIME:
	CREATE	CHSRPID,SNKDLY
	CLR	A0
	MOVE	A0,*A13(STHETA),L
	MOVB	A0,*A13(SNKTHTA)
	MOVB	A0,@SNKSTE
	MOVB	A0,*A13(SNKWALL)
	CALLR	MK_SNK
	MOVB	*A13(SNKDIR),A0
	CALLR	GETDIR			;MOVE SNAKE OUT OF DOOR INTO ARENA
	MOVE	*A9+,A11,L		;GET CONTROL BITS
	MOVE	*A9+,A9,L
	MOVE	A11,*A13(SDELTA),L      	;AND WE'RE OFF!
ENTR:
	CLR	A0
	MOVE	A0,*A13(STHETA),L
	CALLR	DOANG1
	SLEEP	1
	DSJS	A9,ENTR   		;COMPLETE ENTRANCE SEQUENCE


;NOW GENERATE RANDOM SLEEP TIME FOR STHETA PROGRESSION
;THIS LOOP IS INFINITE
;
NEXTSLP:
	MOVI	50,B0
	MOVI	100,B1
	CALLA	RANGRAND
	MOVE	A0,A11			;RANDUM TIME
	MOVI	>200,B0
	MOVI	>700,B1		  	;RANDOM RADIUS
	CALLA	RANGRAND
	MOVE	A0,*A13(SDELTA),L
ANGLE:
	CALLR	DOANG
	SLEEP	1
	MOVI	[>58,>51],A2
	MOVI	[>D8,>141],A3
	CALLA	SCRTSTG			;TOO CLOSE TO WALL?
	JRZ	NOHWALL
	MOVB	A0,*A13(SNKWALL)	;SAVE AS PREVIOUS
	JSRP	WALLHIT
NOHWALL:
	DSJ	A11,ANGLE  		;PROCESS SLEEP LOOP
	MOVB	*A13(SNKTHTA),A0
	XORI	>F,A0
	MOVB	A0,*A13(SNKTHTA)
	JSRP	CHKSNK
	JRUC	NEXTSLP
;
GETDIR:
	MOVI	SNKTAB,A2
	SLL	5,A0			;DIR*32
	ADD	A0,A2
	MOVE	*A2,A9,L		;WALL SUB-TABLE 
	RETS
SNKDLY:
	MOVI	255,A0
	MOVB	A0,@PODCNT
	SLEEP	6*54
	CLR	A0
	MOVB	A0,@PODCNT
	DIE
;
;CREATE OBJECT FOR BODY TO TRACK
;
MK_SNK:
	MOVI	SNAKEINIT,A14
	CALLA	GPALOBJ
	CALLA	STFOBJ
	MOVE	A13,*A0(OPLINK),L
	CALLA	INSOBJ
	MOVE	A0,A8
	JRZ	OBJFAIL
	MOVE	A8,*A13(SNKOBJ),L
	MOVB	*A13(SNKDIR),A0
	SLL	5,A0
	ADDI	SNKPOS,A0
	MOVE	*A0,A0,L
	MOVE	A0,*A8(OXPOS),W
	SRL	16,A0
	MOVE	A0,*A8(OYPOS),W
	MOVE	A8,A0
	JAUC	ADJSTWTL		;PUT US IN THE WORLD
;
OBJFAIL:
	LOCKUP
DOANG:
	MOVB	@PODCNT,A0
	MOVB	@EGGCNT,A1
	ADD	A0,A1
	CMPI	8,A1
	JRHI	DOANG1			;UNSIGNED COMPARE
	MOVE	A13,A9			;SAVE PROC LINK FOR NEXT PROC
	CREATE	PODPID,SNKPOD		;LAY AN EGG
DOANG1:
	MOVE	*A13(STHETA),A2,L      	;PROGRESSIVE  STHETA
	MOVB	*A13(SNKTHTA),A0
	JRZ	CW
	SUBI	>1400,A2
CW:
	MOVE	*A13(SDELTA),A0,L      	;DELTA ANGLE
	ADD	A2,A0
	CALLA	GETCOS			;COS (X)
	MOVE	A0,A1
	MOVK	1,A0
	MPYS	A0,A1
	MOVE	A14,*A13(STHETA),L
	MOVE	A14,A0
	CALLA	GETSIN	      		;SIN (Y)
	MOVE	A0,A3
	MOVK	1,A0
	MPYS	A0,A3
	MOVE	A3,A2
DOANG2:
	MOVE	*A8(OXVAL),A3,L
	MOVE	*A8(OYVAL),A4,L
	ADD	A1,A3
	ADD	A2,A4
	MOVE	A3,*A8(OXVAL),L
	MOVE	A4,*A8(OYVAL),L
	MOVE	A1,*A13(SNKXVEL),L
	MOVE	A2,*A13(SNKYVEL),L
SKPANG:
	RETS
CHKSNK:
; NOW TEST TO SEE IF SNAKE IS HEADED TOWARD THE PLAYER.  IF THIS IS THE CASE
; THEN HAVE SNAKE TRACK THE PLAYER, OTHERWISE RESUME DUMB ACTION
;
	CALLR	DOANG
      	JSRP	DOSEEK
	JRC	WALLHIT
	RETP
;
;HAVE SNAKE SEEK PLAYER
;
DOSEEK:
;
;NOW CHECK TO SEE IF PLAYER IS WITHIN BOUNDARIES FOR SNAKE TRACKING
;
;	MOVE	@KEEP_TORSO_PTR,A1,L
	MOVE	*A1(OXPOS),A0,W
	MOVE	*A1(OYPOS),A2,W
	SLL	16,A2
	MOVY	A2,A0		;Y:X COORS OF PLAYER IN A0
	MOVE	*A8(OXPOS),A1,W
	MOVE	*A8(OYPOS),A2,W
	SLL	16,A2
	MOVY	A2,A1		;Y:X COORS OF SNAKE IN A1
	MOVE	*A13(SNKXVEL),A2,L	;X VELOCITY OF SNAKE
	MOVE	*A13(SNKYVEL),A3,L 	;SAME WITH Y
	CALLR	TARGMOV
	JRNC	AWALL3
	MOVI	240,A10
SEEKEM:					
;	MOVB	@FIRECNT,A0
;	CMPI	3,A0
;	JRGT	NOTNOW
;	CALLR	DOFIRE
NOTNOW:
	PUSHP	A8
;	MOVE	@KEEP_TORSO_PTR,A8,L
	MOVI	[>4A,>41],A2
	MOVI	[>E8,>151],A3
	CALLA	SCRTSTG			;PLAYER TOO CLOSE TO WALL?
	PULLP	A8
	MOVE	A0,A0
	JRNZ	AWALL2			;BR = YES AVOID PLAYER
TRKPLYR2:
;	MOVE	@DEAD,A0,W
	JRNZ	AWALL3			;PLAYER IS DEAD! NOTHING TO SEEK!
;	MOVE	@KEEP_LEG_PTR,A0,L
	CALLR	PLTLINE2
	MOVE	*A8(OXVAL),A3,L
	MOVE	*A8(OYVAL),A4,L
	ADD	A5,A3
	ADD	A6,A4
	MOVE	A3,*A8(OXVAL),L
	MOVE	A4,*A8(OYVAL),L
PLYRDED:
	SLEEP	1
	MOVI	[>4A,>41],A2
	MOVI	[>E8,>151],A3
	CALLA	SCRTSTG			;ARE WE NEAR A WALL?
	JRNZ	AWALL2
	DSJ	A10,SEEKEM
	CLRC 
	RETP
AWALL2:
	MOVB	A0,*A13(SNKWALL)	;SAVE AS PREVIOUS
;					;WALL IN A0
;TURN AWAY FROM WALL 
;
AWALL3:
	SETC
	RETP
;
DOFIRE:
;FIRE AT PLAYER
	MOVE	A8,A2
	MOVE	*A13(SNKHED),A8,L
	CREATE	CHSRPID,SNKFIRE	
	MOVE	A2,A8
	RETS
;SNKFIRE - FIRE A PROJECTILE FROM SNAKES HEAD
; PARAMS:
; 
SNKFIRE:
	MOVI	2,A9
	MOVB	@FIRECNT,A0
	ADD	A9,A0
	MOVB	A0,@FIRECNT
SFRELUP:
	CREATE	CHSRPID,SFIRE
	SLEEP	15
	DSJ	A9,SFRELUP
	DIE
SFIRE:	
;FIRST GET OBJECT PTR OF SNAKE HEAD 
;
;	MOVE	@DEAD,A0
	JRZ	PDED		;FIRING OK
	DIE
PDED:
	CLR	A0
	MOVB	A0,*A13(ANITIKS)
	MOVE	*A8(OXVEL),A9,L
	MOVE	*A8(OYVEL),A10,L
	SLL	2,A9
	SLL	2,A10
	CALLR	ANIXY	
	MOVI	FLAMEINIT,A14
	CALLA	GPALOBJ
	CALLA	STFOBJ
	MOVE	A13,*A0(OPLINK),L
	CALLA	INSOBJ
	MOVE	A0,A8
	JRZ	OBJFAIL2
	CALLA	ADJSTWTL
	MOVE	A3,*A8(OXPOS),W		;INITIAL DIRECTION AND VELOCITY
	MOVE	A2,*A8(OYPOS),W		;OF PROJECTILE AFTER LEAVING
	MOVE	A9,*A8(OXVEL),L		;SNAKES MOUTH
	MOVE	A10,*A8(OYVEL),L
	MOVI	SPITANI,A9		;ANIMATION LIST FOR PROJECTILE
;
;NOW DO ANIMATION FOR PROJECTILE
;
CHKWAL:
	MOVB	*A13(ANITIKS),A0
	JRNZ	UPTIK
	MOVK	4,A1
	JSRP	FRANIM
	JRNC	UPTIK
	MOVK	1,A0
	MOVI	SPITANI,A9
UPTIK:
	DEC	A0
	MOVB	A0,*A13(ANITIKS)
	MOVI	[>23,>21],A2
	MOVI	[>FC,>171],A3
	CALLA	SCRTSTG
	JRZ	OUTWAL
	CLR	A0
	MOVE	A0,*A8(OXVEL),L
	MOVE	A0,*A8(OYVEL),L
	MOVI	SMLEXP,A9
	MOVK	1,A1
	JSRP	FRANIM
	MOVI	BOMBSND,A0 		;AUDIO BOMB EXPLODE
	CALLA	ONESND
  	MOVE	A8,A0
	CALLA	DELOBJ
	CALLA	DELPAL
	MOVB	@FIRECNT,A0		;1 BULLET LESS
	DEC	A0
	MOVB	A0,@FIRECNT
	DIE
OUTWAL:
	SLEEP	1
	JRUC	CHKWAL
OBJFAIL2:
	LOCKUP
;
;CALLED FROM COLLISION ROUTINE
KILL_SBULL:
;VICTIM (IE. SNAKE BULLET PNTR IS IN A8)
;KILLER (IE. PLYR IS IN A0)
	MMTM	SP,A7
	MOVE	*A8(OPLINK),A0,L      ;GET PROCESS LINK TO BULLET
	CALLA	KILL		      ;KILL ITS PROCESS
	MOVI	CLSNEUT|TYPNEUT,A0
	MOVE	A0,*A8(OID),W
	MOVE	*A8(OPLINK),A0,L
	CALLA	KILL_PLYR	      ;KILL PLAYER OFF
	CLR	A0
	MOVE	A0,*A8(OXVEL),L
	MOVE	A0,*A8(OYVEL),L
	CREATE	CHSRPID,SNKBEXP
	MOVB	@PODCNT,A0
	DEC	A0
	MOVB	A0,@PODCNT	      ;1 LESS POD
	MMFM	SP,A7
	RETS
SNKBEXP:
	MOVI	BOMBSND,A0
	CALLA	ONESND
	MOVI	SMLEXP,A9
	MOVK	1,A1
	JSRP	FRANIM
	MOVE	A8,A0
	CALLA	DELOBJ
	DIE
;
;CALLED FROM COLLISION ROUTINE
KILL_SPOD:
;VICTIM (IE. SNAKE POD PNTR IS IN A0)
;KILLER (IE. PLYRS BULLET IS IN A8)
;
	MMTM	SP,A1,A7
	MOVE	A0,A8
	MOVI	CLSNEUT|TYPNEUT,A1
	MOVE	A1,*A0(OID),W
	MOVE	*A0(OPLINK),A0,L		;GET PODS PROCESS
	CALLA	KILL				;AND SNUFF IT
	CREATE	CHSRPID,SNKBEXP			;EXPLODE IT
	MOVB	@PODCNT,A0			;1 POD LESS
	DEC	A0
	MOVB	A0,@PODCNT
	MMFM	SP,A1,A7
	RETS
;
;CALLED FROM COLLISION ROUTINE
GET_SEGG:
;VICTIM (IE. SNAKE EGG PNTR IS IN A0)
;KILLER (IE. PLAYER IS IN A8)
	MMTM	SP,A7
	MOVE	A0,A8
	MOVI	CLSNEUT|TYPNEUT,A0
	MOVE	A0,*A8(OID),W
	CREATE	CHSRPID,EGGBONUS
	MOVB	@EGGCNT,A0			;1 EGG LESS
	DEC	A0
	MOVB	A0,@EGGCNT
	MMFM	SP,A7
	RETS
EGGBONUS:
	MOVI	BULLRSND,A0
	CALLA	ONESND
	MOVI	60,A0
	MOVB	A0,@EVENT   		;RESET BONUS EVENT TIMER
	MOVE	*A8(OPLINK),A0,L	
	CALLA	KILL			;KILL OBJECTS PROCESS
BONUSPNT:
	MOVI	BNSIMGTAB,A3  		;BONUS IMAGES
	MOVI	BNSADDTAB,A4		;BONUS POINT SPREADS
	MOVB	@BONUM,A2
	INC	A2
	CMPI	5,A2
	JRGE	KPTOP
	MOVB	A2,@BONUM		;NEXT HIGHER BONUS
KPTOP:
	DEC	A2
	SLL	5,A2
	ADD	A2,A3
	ADD	A2,A4
	MOVE	*A4,A1,L		
	MOVI	P1DATA,A2
	CALLA	SCRADD2
	MOVE	*A3,A1,L		;NEW IMAGE
	MOVI	DMACNZ,A4		;CONSTANT COLOR
	MOVI	>3E3E0000,A0
	MOVE	A0,*A8(OPAL),L		;FLASHY
	MOVI	>7FFE,A0
	MOVE	A0,*A8(OZPOS),W		;SCORES FLOAT ABOVE EVERYTHING
	CALLA	ANI			;SHOW POINTS FOR EGG PICKED-UP
	MOVI   >FFFE0000,B0		;MOVE SCORE DISPLAY UP SCREEN
	MOVI   >FFFF0000,B1
	CALLA	RANGRAND
	MOVE	A0,*A8(OYVEL),L
	SLEEP	100
	MOVE	A8,A0
	CALLA	DELOBJ
	DIE
BTIMER:
;RUNS THROUGHOUT SNAKE PROCESS
	MOVI	60,A0
	MOVB	A0,@EVENT
BTMLUP:
	MOVB	@EVENT,A0
	DEC	A0
	MOVB	A0,@EVENT
	JRNZ	HITBOT
	MOVI	60,A0
	MOVB	A0,@EVENT
;NOW DECREMENT BONUS COUNT
	MOVB	@BONUM,A0
	DEC	A0
	JRN	HITBOT
	MOVB	A0,@BONUM
HITBOT:
	SLOOP	1,BTMLUP
	RETS

BNSIMGTAB:
	.LONG	PTS100,PTS500,PTS1000,PTS2500,PTS5000
;
BNSADDTAB:
	.LONG	>100,>500,>1000,>2500,>5000
;
TARGMOV:
; TAKEN FROM NARC
; PARAMS
; A0 = Y:X COOR OF PLAYER	  
; A1 = Y:X START COOR OF SNAKE	  
; A2 = XVEL OF SNAKE
; A3 = YVEL OF SNAKE
; RETURNS
; CARRY SET IF BOTH X AND Y VELOCITIES ARE IN THE DIRECTION OF THE PLAYER

	CMPXY	A0,A1
	JRXGT	NDNEGXV
	MOVE	A2,A2
	JRN	WRONGWAY
	JRUC	XDOK
NDNEGXV:
	MOVE	A2,A2
	JRP	WRONGWAY
XDOK:
	CMPXY	A0,A1
	JRYGT	NDNEGYV
	MOVE	A3,A3
	JRN	WRONGWAY
	JRUC	YDOK
NDNEGYV:
	MOVE	A3,A3
	JRP	WRONGWAY
YDOK:
	SETC
	RETS

WRONGWAY:
	CLRC
	RETS
;
; TURN AWAY FROM WALL 
;
WALLHIT:
; NOTE: CALL THIS ROUTINE AS A JSRP!
;
;COMPUTE WHICH QUADRANT 0-3 COLLISION TOOK PLACE
;5 6  OR  9 A
;7 8	  F 10

	MOVK	5,A10
	MOVE	*A8(OXPOS),A0,W		;X POSITION OF MASTER PTR
	MOVE	*A8(OYPOS),A1,W
	MOVE	@WORLDTLX,A2,L
	MOVE	@WORLDTLY,A3,L
	SRL	16,A2
	SRL	16,A3
	SUB	A2,A0
	SUB	A3,A1
	CMPI	200,A0
	JRGE	QUAD13			;BR = IN QUAD 1 OR 3
	CMPI	128,A1			;IN QUAD 0 OR 2
	JRLT	DOSDIR			;BR = IN QUAD 0
	MOVK	7,A10			;OTHERWISE WE ARE IN QUAD 2
	JRUC	DOSDIR
QUAD13:
	MOVK	6,A10
	CMPI	128,A1			;
	JRLT	DOSDIR			;BR = IN QUAD 1
	MOVK	8,A10			;OTHERWISE WE ARE IN QUAD 3
;
DOSDIR:
;COMPUTE DIRECTION SNAKE HEAD IS IN
;
	MOVE	*A13(SNKXVEL),A1,L
	MOVE	*A13(SNKYVEL),A2,L
	CALLR	GETHDR			;GET DIRECTION HEADING 1~8
	MOVI	>B00,A2
	MOVE	A2,*A13(SDELTA),L	
TRNLUP:
	CALLR	DOANG			;PLOT NEXT POINT
	SLEEP	1			;MUST HAVE OUR SLEEP!
	MOVE	*A13(SNKXVEL),A1,L
	MOVE	*A13(SNKYVEL),A2,L
	CALLR	GETHDR			;GET DIRECTION HEADING 1~16
	CMP	A0,A10
	JRNE	TRNLUP			;WAIT FOR TURN COMPLETION

	JSRP	DOSEEK
	JRC	AWALL
	RETP
;
;KEEP MOVING AWAY UNTIL CLEARED FROM WALL 
AWALL:
	MOVE	*A13(SNKXVEL),A1,L
	MOVE	*A13(SNKYVEL),A2,L
	MOVE	*A8(OXVAL),A3,L
	MOVE	*A8(OYVAL),A4,L
	ADD	A1,A3
	ADD	A2,A4
	MOVE	A3,*A8(OXVAL),L
	MOVE	A4,*A8(OYVAL),L
	SLEEP	1
	MOVI	[>5A,>51],A2
	MOVI	[>E8,>141],A3
	CALLA	SCRTSTG			;PLAYER TOO CLOSE TO WALL?
	JRNZ	WSJV
	RETP				;NO WALL BEING HIT NOW
WSJV:
	MOVB	*A13(SNKWALL),A1	;LOOP ONLY IF SAME WALL
	CMP	A0,A1
	JRZ	AWALL
	MOVB	A0,*A13(SNKWALL)	;MAKE PREVIOUS
	JRUC	WALLHIT			;DIFFERENT WALL BEING HIT NOW
;
; PLTLINE - MAKE AN OBJECT TRAVEL FROM PNT. A TO PNT. B		 
; VIA ITS ANIM PNTS.
;	    		 
; A8 = OBJECT SEEKING
; A0 = OBJECT SEEKED
; RETURNS:								 
; A5 = X VEL UHL							 
; A6 = Y VEL UHL							 
;
PLTLINE2:
	MOVE	*A0(OXPOS),A5,W
	MOVE	*A0(OYPOS),A6,W
	MOVE	*A8(OXPOS),A3,W
	MOVE	*A8(OYPOS),A4,W
	JRUC	ANOM
PLTLINE:
	MOVE	A8,A7		;SAVE OBJ PTR
	MOVE	A0,A8
	CALLR	ANIXY
	MOVE	A2,A6
	MOVE	A3,A5
	MOVE	A7,A8	        ;RESTORE PTR
	MMTM	SP,A5,A6
	CALLR	ANIXY
	MMFM	SP,A5,A6
	MOVE	A2,A4
ANOM:
	SUB	A3,A5		;FIND DIFFERENCE
	SUB	A4,A6
	MOVE	A6,A3		;
	MOVE	A5,A1
	ABS	A5
	ABS	A6
	ADD	A5,A6		;CALC SUM ABS(DX+DY)
	SLL	16,A1		;SHIFT TO ACCOMODATE FRACTIONAL VELOCITY
	SLL	16,A3
	DIVS	A6,A1 		;GENERATE SPEED RATIOS
	DIVS	A6,A3
	MOVK	20,A5
	MPYS	A5,A3
	MPYS	A1,A5 		
	SRA	4,A3
	SRA	4,A5		;FINAL X VEL
	MOVE	A3,A6		;FINAL Y VEL
	RETS

SNAKEINIT:
	.LONG	0,0,AFONT0
	.WORD	0,>8000,CLSNEUT
	.LONG	0,0
FLAMEINIT:
	.LONG	0,0,PODA
	.WORD	157,>8002,CLSENMY|TYPSBULL
	.LONG	0,0
EGGINIT:
	.LONG	0,0,tail1
	.WORD	157,>8002,CLSENMY|TYPSEGG
	.LONG	0,0
;
SNKPOS:
	.LONG	0,[110,0],[110,400],[0,192],[256,192]
SNKTAB:
	.LONG	0,SNK1LFT,SNK1RGT,SNK1TOP,SNK1BOT
;
; TABLE STRUCTURE FOR EACH LINE ENTRY
; .LONG DELTA ANGLE
; .LONG SLEEP TIME FOR THETA PROGRESSION
;
;SINE TABLES FOR TOP DOOR ENTRANCE
;
SNK1LFT:
	.LONG	>5E70,60	
;
SNK1RGT:
	.LONG	>2EE70,60	
;
SNK1TOP:
	.LONG	>EF20,80	
;
SNK1BOT:
	.LONG	>3EF00,60	
;
;CALLED FROM COLLISION ROUTINE
KILL_PC:
	MMTM	SP,A1,A2,A3,A4,A5,A6,A7,A13
	MOVI	P1DATA,A2 		;PLAYER	1 SCORE SELECT
	MOVE	*A8(OPLINK),A13,L	;NOW GET PROCESS LINK
;
;PCS FLY ROUTINE GOES SOMEWHERE AROUND HERE
;
;EXPAND TAIL PIECES EXCEPT LAST AND FIRST 4 WHICH ARE INDESTRUCTABLE
;
	MOVB	*A13(SNKNUM),A0
	CMPI	4,A0
	JRLE	NOKILL
	CMPI	NUMPCS-3,A0
	JRLT	UPDPC
NOKILL:
	MMFM	SP,A1,A2,A3,A4,A5,A6,A7,A13
	RETS
;
UPDPC:
	MOVB	*A13(SHITS),A0
	MOVB	*A13(SNKDIE),A1
	JRNZ	PCX
	INC	A0
	MOVB	A0,*A13(SHITS)
SKPINC:
	MOVE	A0,A4			;SAVE HIT COUNT 
	MOVI	SEXPAND,A1
	MOVI	SLPTIME,A2
	MOVI	NEXPAND,A5
	SLL	5,A0			;NEXT EXPANDED PIECE PLEASE!
	ADD	A0,A1
	SRL	1,A0
	ADD	A0,A2
	ADD	A0,A5
	MOVE	*A1,A1,L
	MOVE	*A5,A5,W       		;COMPARATOR 
	MOVE	*A2,A2,W
	JRNZ	ANIMOK
;SNAKE PIECE IS DEAD
	CREATE	CHSRPID,PCDED
	MOVK	1,A3
	MOVB	A3,*A13(SNKDIE)		;MARK THIS PIECE AS DEAD
	JRUC	PCX
PCDED:
	MOVE	*A8(OXVEL),A9,L
	MOVE	*A8(OYVEL),A10,L
	MOVI	CEXSND1,A0
	CALLA	ONESND
	CREATE	0,ADDPCS2
	MOVI	0,B0
	MOVI	4,B1
	CALLA	RANGRAND		;RANDUM CARCASS PIECE
	DEC	A0
	SLL	5,A0
	ADDI	CARCTAB,A0
	MOVE	*A0,A1,L
	MOVE	*A8(OFLAGS),A4,W
	CALLA	ANI			;UPDATE ANIMATION CEL
	DIE
ANIMOK:
	MOVB	A2,*A13(SNKSEP)		;ADJUST TRAKING
	MOVE	*A8(OFLAGS),A4,W
	CALLA	ANI			;UPDATE ANIMATION CEL
	MOVB	*A13(SNKNUM),A0		;GET THIS PIECE NUMBER
	CMPI	NUMPCS,A0		;LAST PIECE IN SNAKE?
	JRZ	PCPREV			;BR = NO MORE PIECES AFTER THIS ONE
;					;THERE IS ONE PREVIOUS HOWEVER
;NOW CHECK TO ADJUST PIECE AHEAD, IF IT IS LESS THAN
;TABLED VALUE THEN REPLACE WITH SAID VALUE
PCNEXT:
	MOVE	*A13(SNKPTR),A3,L	;GET TOP OF SNAKE RAM STACK
	SLL	5,A0			
	ADD	A0,A3			;GET ELEMENT IN STACK FOR THIS PIECE
	MOVE	A3,A7
	ADDI	32,A3			;ADJUST POINTER FOR NEXT PIECE
	MOVE	*A3,A8,L
	MOVE	*A8(OPLINK),A3,L	;GET ITS PROCESS BLOCK POINTER
	MOVB	A2,*A3(SNKSEP)		;ALSO ADJUST ITS TRACKING OFFSET
	MOVB	*A3(SHITS),A0		;NEXT PIECE HIT COUNT
	CMP	A0,A5
	JRLE	PCPREV			;NO GO, NOW CHECK PREVIOUS PIECE
	MOVI	SEXPAND,A6
	MOVB	A5,*A3(SHITS) 		;UPDATE HITS
	SLL	5,A5
	ADD	A5,A6
	MOVE	*A6,A1,L
	MOVE	*A8(OFLAGS),A4,W
	CALLA	ANI			;UPDATE ANIMATION CEL
;NOW CHECK TO SEEK IF PREVIOUS PIECE IS LARGER THAN THIS PIECE. IF TRUE,
;THEN TAKE SLEEP VALUE FROM THAT PIECE, OTHERWISE USE OWN SLEEP VALUE
;
	MOVE	*A7,A7,L		;CURRENT SNAKE OBJ BLOCK PTR
	MOVE	*A7(OPLINK),A4,L	;GET PREVIOUS PROCESS BLOCK POINTER
	MOVB	*A4(SHITS),A0		;PREVIOUS PIECE
	MOVB	*A3(SHITS),A1		;CURRENT PIECE
	CMP	A0,A1
	JRLE	KPCRNT			;BR = CURRENT PIECE BIGGER
	MOVB	*A4(SNKSEP),A4		;PREVIOUS SLEEP
	MOVB	A4,*A3(SNKSEP)		;INTO NEXT SLEEP
KPCRNT:
	SRL	5,A5			;RESTORE A5
;
;NOW CHECK TO ADJUST PIECE PREVOUS IF IT IS LESS THAN
;TABLED VALUE THEN REPLACE WITH SAID VALUE
PCPREV:
	MOVB	*A13(SNKNUM),A0		;GET THIS PIECE NUMBER
	JRZ	PCX			;BR = NO MORE PIECES BEFORE THIS ONE
	MOVE	*A13(SNKPTR),A3,L	;GET TOP OF SNAKE RAM STACK
	SLL	5,A0			
	ADD	A0,A3			;GET ELEMENT IN STACK FOR THIS PIECE
	SUBI	32,A3			;ADJUST POINTER FOR PREVIOUS PIECE
	MOVE	A3,A7
	MOVE	*A3,A8,L
	MOVE	*A8(OPLINK),A3,L	;GET ITS PROCESS BLOCK POINTER
	MOVB	A2,*A3(SNKSEP)		;ALSO ADJUST ITS TRACKING OFFSET
	MOVB	*A3(SHITS),A0		;NEXT PIECE HIT COUNT
	CMP	A0,A5
	JRLE	PCX			;NO GO, NOW CHECK PREVIOUS PIECE
	MOVI	SEXPAND,A6
	MOVB	A5,*A3(SHITS)		;UPDATE HITS
	SLL	5,A5
	ADD	A5,A6
	MOVE	*A6,A1,L
	MOVE	*A8(OFLAGS),A4,W
	CALLA	ANI			;NEXT ANIMATION CEL
;NOW CHECK TO SEEK IF PREVIOUS PIECE IS LARGER THAN THIS PIECE. IF TRUE,
;THEN TAKE SLEEP VALUE FROM THAT PIECE, OTHERWISE USE OWN SLEEP VALUE
;
	MOVE	*A7,A7,L		;CURRENT SNAKE OBJ BLOCK PTR
	MOVE	*A7(OPLINK),A4,L	;GET PREVIOUS PROCESS BLOCK POINTER
	MOVB	*A4(SHITS),A0		;PREVIOUS PIECE
	MOVB	*A3(SHITS),A1		;CURRENT PIECE
	CMP	A0,A1
	JRLE	PCX			;BR = CURRENT PIECE BIGGER
	MOVB	*A4(SNKSEP),A4		;PREVIOUS SLEEP
	MOVB	A4,*A3(SNKSEP)		;INTO NEXT SLEEP
PCX:
	MMFM	SP,A1,A2,A3,A4,A5,A6,A7,A13
	RETS
;
;GETHDR - RETURNS 1 OF 16 DIRECTIONS BASED ON OBJECTS X,Y VELOCITIES 
;PARAMS:
; A1 = OBJ X VELOCITY
; A2 = OBJ Y VELOCITY
;RETURNS:
; A0 = 4,B,7,F,1,9,5,D,3,E,6,A,2,10,8,C = CW DIRECTION STARTING AT 12 O'CLOCK
;     4
;   2	1 
;     3	 
;  	 
;
GETHDR:
	MOVE	A1,A3
	MOVE	A2,A4
	ABS	A3		;ABSOLUTE X VELOCITY
	ABS	A4		;ABSOLUTE Y VELOCITY
	MOVE	A3,A5
	ADD	A4,A5		;SUM Y+X
	JRNE	GAD1		;BR = THERE IS A DIRECTION HERE!
	CLR	A3		;STANDING CASE			  
	JRUC	SETDVAL
GAD1:
	MOVK	3,A5
	MOVK	3,A7
	MPYU	A3,A5 		;CALC 3*X
	MPYU	A4,A7		;CALC 3*Y
	CMP	A7,A3		;XV>3*YV ?
	JRHS	GADX		;BR = CHECK X VELOCITY CASE
	CMP	A5,A4		;YV>3*XV ?
	JRHS	GADY		;BR = CHECK Y VELOCITY CASE
;
;DIAGONAL XY VELOCITY CASE
;4 POSSIBLE QUADRANTS 0-3
; 3 2
; 1 0
	MOVE	A1,A3		;SAVE X,Y VELOCITIES
	MOVE	A2,A4
	SRL	31,A1 		;X VEL
	SRL	31,A2		;Y VEL
	SLL	1,A2
	ADD	A1,A2
;WE NOW HAVE THE QUADRANT NOW CHECK FOR 1 OF 3 DIRECTIONS WITHIN QUADRANT
;IN A2
	ABS	A3 		;X UNSIGNED COMPARE
	ABS	A4		;Y 
	CMP	A3,A4		;Y>X?
	JRGT	DIFF		;BR = YES
	SUB	A4,A3
	CMPI	>4000,A3	;-4000?
	JRLT	INRNGE		;WITHIN RANGE, USE QUADRANT K
	ADDK	9,A2		;RANGE LO
	JRUC	SETRNGE
DIFF:
	SUB	A3,A4
	CMPI	>4000,A4	;+4000
	JRLT	INRNGE		;WITHIN RANGE USE QUADRANT  K
	ADDK	>D,A2		;RANGE HI
	JRUC	SETRNGE
INRNGE:
	ADDK	5,A2
SETRNGE:
	MOVE	A2,A3
	JRUC	SETDVAL
;X VELOCITY CASE
GADX:
	MOVK	1,A3 		;DISCRETE RYTE
	MOVE	A1,A1
	JRNN	SETDVAL 		;
	MOVK	2,A3		;LEFT
	JRUC	SETDVAL
;Y VELOCITY CASE
GADY:	
	MOVK	3,A3		;DISCRETE DOWN
	MOVE	A2,A2
	JRNN	SETDVAL
	MOVK	4,A3		;UP
;HAVE OFFSET IN A3
SETDVAL:
	MOVE	A3,A0
	RETS
;
;EGG/POD PROCESS FOR SNAKE
; EGG IS WORTH POINTS WHEN PICKED UP
; WHEN IT METAMORPHISIZES INTO A POD IT CHASES AFTER YOU
; FOR A TIME, THEN RUNS ITSELF INTO A WALL
SNKPOD:	
;FIRST GET OBJECT PTR OF SNAKE HEAD 
;
	MOVB	@SNKINA,A0
	JRZ	RIP
NOPOD:
	DIE
RIP:
;GET ANI X,Y OF TAIL 
;
	MOVE	A9,A0			
	MOVE	*A0(SNKTAIL),A8,L
	MOVE	*A8(OPLINK),A1,L	;GET TAIL PIECE PROCESS
	MOVB	*A1(SNKDIE),A2		;TAIL PIECE DEAD?
	JRNZ	NOPOD			;NO ACTION HERE!
	MOVB	*A1(SHITS),A11		;ANIMATION STATE
	MOVK	1,A0
	MOVB	A0,@SNKINA
	JSRP	SHRNKME
	JSRP	BLOATME
	CREATE	PODPID,PODER			;BLOW OUT AN EGG
	JSRP	NOMINAL
	CLR	A0
	MOVB	A0,@SNKINA
	DIE
PODER:
;	
	MOVB	@EGGCNT,A0
	INC	A0
	MOVB	A0,@EGGCNT		;UPDATE EGGS RELEASED
	CALLR	ANIXY	
	MOVI	EGGINIT,A14
	CALLA	GPALOBJ
	CALLA	STFOBJ
	MOVE	A13,*A0(OPLINK),L
	CALLA	INSOBJ
	MOVE	A0,A8
	JRZ	OBJFAIL2
	CALLA	ADJSTWTL
	MOVE	A3,*A8(OXPOS),L		;INITIAL DIRECTION 
	MOVE	A2,*A8(OYPOS),L		;OF EGG AFTER LEAVING TAIL
;
	MOVI	EGGANI,A9
	CLR	A0
	MOVB	A0,*A13(ATIKS)
	MOVI	12*54,A11		;TIME FOR DORMANT EGG
ANIEGG:
	MOVB	@GRPCNT,A0
	JRZ	NORLSE
        DEC 	A0
	MOVB	A0,@GRPCNT
	JRUC	METAMORPH
NORLSE:
	MOVB	*A13(ATIKS),A0
	JRNZ	UPTIKS1
	MOVK	4,A1
	JSRP	FRANIM
	JRNC	UPTIKS1
	MOVK	1,A0
	MOVI	EGGANI,A9  		;LOOP ANIMATION LIST
UPTIKS1:
	DEC	A0
	MOVB	A0,*A13(ATIKS)
	SLEEP	1
	MOVB	@PODSTAT,A0		;EXPLODE EGG?
	JRNZ	EXEGG			;EXPLOD EGG!
;	MOVE	@DEAD,A0,W
	JRNZ	NORLSE			;IF PLAYER DEAD DO NOT YET TURN	POD
	MOVB	@EGGCNT,A0
	CMPI	6,A0	       		;IF 6 OR MORE EGGS RELEASED
	JRLT	NOMETA
	MOVK	4,A0
	MOVB	A0,@GRPCNT		;POD THEM IN A GROUP OF 4
NOMETA:
	DSJ	A11,ANIEGG		

;NOW DO METAMORPHOSIS ANIMATION (EGG TO POD TRANSITION)

METAMORPH:
 	MOVB	@EGGCNT,A0
	DEC	A0
	MOVB	A0,@EGGCNT		;REFLECT THE CHANGE
	MOVB	@PODCNT,A0
	INC	A0
	MOVB	A0,@PODCNT		;EGG NOW IS A POD
	SLL	5,A0
	ADDI	PLYRXYTAB,A0
	MOVE	*A0,A0,L
	MOVE	A0,@PLRXOFF,W
	SRL	16,A0
	MOVE	A0,@PLRYOFF,W
	MOVI	METANI,A9  		;DO TRANSITION SEQUENCE
	CLR	A10
NFRAME:
	MOVK	4,A1
	JSRP	FRANIM
	MOVE	A0,A10
	JRC	NOTIKS
TIKS:
	SLEEP	1
	MOVB	@PODSTAT,A0		;EXPLODE POD?
	JRNZ	EXPOD			;BR = YUP
	DSJS	A10,TIKS
	JRUC	NFRAME

NOTIKS:
;
;NOW HAVE ACTIVE POD SEEK PLAYER

	MOVI	PODANI,A9
	CLR	A0
	MOVB	A0,*A13(ATIKS)
	MOVI	CLSENMY|TYPSBULL,A0
	MOVE	A0,*A8(OID),W		;NOW OBJECT IS IN ENEMY CLASS
	MOVI	200,A0			;OBJECT IS NOW HIGHER Z THAN SNAKE
	MOVE	A0,*A8(OZPOS),W		;AND PLAYER
;
PODLUP:
;SEEKER CALLED EVERY OTHER TICK
	MOVK	2,A10
;	MOVB	@DEAD,A0
	JRNZ	WALLY			;PLAYER IS DEAD DON'T SEEK ANYMORE
	CALLR	SEEKER
;
;NOW DO POD ANIMATION 
;
WALLY:
	MOVB	*A13(ATIKS),A0
	JRNZ	UPTIKS3
	MOVK	4,A1
	JSRP	FRANIM
	JRNC	UPTIKS3

	MOVK	1,A0
	MOVI	PODANI,A9  		;LOOP ANIMATION LIST
UPTIKS3:
	DEC	A0
	MOVB	A0,*A13(ATIKS)
	MOVI	[>23,>21],A2
	MOVI	[>FC,>171],A3
	CALLA	SCRTSTG
	JRZ	OUTWAL2
	CLR	A0
	MOVE	A0,*A8(OXVEL),L
	MOVE	A0,*A8(OYVEL),L
	MOVI	SMLEXP,A9
	MOVK	1,A1
	JSRP	FRANIM
	MOVI	BOMBSND,A0 		;AUDIO BOMB EXPLODE
	CALLA	ONESND
  	MOVE	A8,A0
	CALLA	DELOBJ
	MOVB	@PODCNT,A0		;1 POD LESS
	DEC	A0
	MOVB	A0,@PODCNT
	DIE
OUTWAL2:
	SLEEP	1
	MOVB	@PODSTAT,A0		;EXPLODE POD?
	JRNZ	EXPOD			;BR = YUP
	DSJ	A10,WALLY
	JRUC	PODLUP
EXEGG:
;EXPLODE EGG GIVING 5000 PNTS. FOR EACH ONE
;THIS ROUTINE IS CALLED WHEN SNAKE IS KILLED OFF
	MOVB	@EGGCNT,A0
	DEC	A0
	MOVB	A0,@EGGCNT
	JRUC	EXANI

EXPOD:
;EXPLODE POD GIVING 5000 PNTS. FOR EACH ONE
;THIS ROUTINE IS CALLED WHEN SNAKE IS KILLED OFF
;
	MOVB	@PODCNT,A0
	DEC	A0
	MOVB	A0,@PODCNT
EXANI:
	MOVI	BOMBSND,A0 		;AUDIO BOMB EXPLODE
	CALLA	ONESND
	MOVI	MEDEXP,A9
	MOVK	1,A1
	JSRP	FRANIM
	MOVK	4,A0
	MOVB	A0,@BONUM		;MAX POINTS
	MOVI	CLSNEUT|TYPNEUT,A0	;NO COLLISIONS
	MOVE	A0,*A8(OID),W
	CREATE	0,BONUSPNT
	DIE
;                                                                        
SEEKER:
;	MOVE	@KEEP_TORSO_PTR,A3,L
	MOVE	*A3(OXPOS),A0	        ;X POSITION OF PLAYER
	MOVE	@PLRXOFF,A1		;ADD OFFSET ABSOLUTE
	JRP	XCALC
	ADD	A0,A1
	MOVE	A1,A0
	JRUC	XDNE
XCALC:
	ADD	A1,A0
XDNE:
	MOVE	*A3(OYPOS),A1		;AND Y POSITION
	MOVE	@PLRYOFF,A2   		;ADD OFFSET ABSOLUTE
	JRP	YCALC
	ADD	A1,A2
	MOVE	A2,A1
	JRUC	YDNE
YCALC:
	ADD	A2,A1
YDNE:
 	MOVE	*A8(OXPOS),A2		;X POSITION OF TRACKING POD
	MOVE	*A8(OYPOS),A3		;Y POSITION OF TRACKING POD
	CMP	A1,A3			
	JRGT	CHKHI			
CHKLO:

;POD ON HIGHER LINE THAN PLAYER SO MOVE POD DOWN

	SUB	A3,A1
	MOVE	*A8(OYVEL),A3,L
	CMPI	MAXVEL,A3
	JRGT	NOADD1  
	ADDI	PODK,A3
NOADD1:
	MOVE	A3,*A8(OYVEL),L
	JRUC    OUTLUP
CHKHI:

;POD ON LOWER LINE THAN PLAYER SO MOVE POD UP

	SUB	A1,A3
	MOVE	*A8(OYVEL),A3,L
	MOVE	A3,A4
	NEG	A4
	CMPI	MAXVEL,A4
	JRGT	NOSUB2
	SUBI	PODK,A3
NOSUB2:
	MOVE	A3,*A8(OYVEL),L
OUTLUP:
	CMP	A0,A2			
	JRGT	CHKLFT			
;
;MOVE POD RIGHT
;
CHKRGT:
	SUB	A2,A0
	MOVE	*A8(OXVEL),A3,L
	CMPI	MAXVEL,A3
	JRGT	NOADD2
	ADDI	PODK,A3
NOADD2:
	MOVE	A3,*A8(OXVEL),L
	JRUC	OUTLUP2
CHKLFT:
;
;MOVE POD LEFT
	SUB	A0,A2
	MOVE	*A8(OXVEL),A3,L
	MOVE	A3,A4
	NEG	A4
	CMPI	MAXVEL,A4
	JRGT	NOSUB1
	SUBI	PODK,A3
NOSUB1:
	MOVE	A3,*A8(OXVEL),L
OUTLUP2:
	RETS
;
SHRNKME:
	CMPI	1,A11	
	JRGT	SK			;SHRUNK TO THE MAX! BLOAT HER UP!
	RETP
SK:
	DEC	A11
	MOVE	A11,A3			;MOVE TO WORK TEMP
	SLL	5,A3
	ADDI	SEXPAND,A3		;NEW ANIMATION FRAME
	MOVE	*A3,A1,L
	MOVE	*A8(OFLAGS),A4,W	;NEW ANIMATION STATE
	CALLA	ANI			;UPDATE ANIMATION CEL
	SLEEP	3
	JRUC	SHRNKME
BLOATME:
	CMPI	9,A11			
	JRLT	BLT			;BLOATED TO THE MAX! RESTORE SIZE
	RETP
BLT:
	INC	A11
	MOVE	A11,A3
	SLL	5,A3
	ADDI	SEXPAND,A3
	MOVE	*A3,A1,L
	MOVE	*A8(OFLAGS),A4,W
	CALLA	ANI
	SLEEP	3
	JRUC	BLOATME
NOMINAL:
	CMPI	1,A11			
	JRNZ	NOM			;BLOATED TO THE MAX! RESTORE SIZE
	RETP
NOM:
	DEC	A11
	MOVE	A11,A3
	SLL	5,A3
	ADDI	SEXPAND,A3
	MOVE	*A3,A1,L
	MOVE	*A8(OFLAGS),A4,W
	CALLA	ANI
	SLEEP	3
	JRUC	NOMINAL
;
HSNKHIT:
;
;CALLED FROM COLLISION ROUTINE
;
;NOW SEE IF ALL PIECES HAVE BEEN SHOT, IF TRUE THEN ALLOW HEAD TO TAKE DAMAGE
;
	MMTM	SP,A1,A2,A10,A13
	MOVE	*A8(OPLINK),A13,L	;GET HEADS PROCESS LINK
	MOVE	*A13(SNKPTR),A10,L	;AND ITS RAM STACK 
	ADDI	6*32,A10	 	
	MOVI	NUMPCS-9,A2		;8 PIECES DON'T BLOW-UP
NEXTPC:
	MOVE	*A10+,A0,L
	MOVE	*A0(OPLINK),A13,L	;GET PROCESS FOR THIS PIECE
	MOVB	*A13(SNKDIE),A1
	JRZ	SHOUT			;PIECE NOT DEAD, EXIT! 
	DSJS	A2,NEXTPC		;NEXT PIECE PLEASE!
;
;ALL PIECES CONFIRMED DEAD! NOW ALLOW HEAD TO TAKE DAMAGE
;
	MOVE	*A8(OPLINK),A13,L	;GET HEADS PROCESS LINK.
	MOVB	*A13(SHITS),A1
	INC	A1
	MOVB	A1,*A13(SHITS)
	CMPI	HEDHITS,A1
	JRLT	SHOUT
	MOVK	1,A0
	MOVB	A0,*A13(SNKEXP)
SHOUT:
	MMFM	SP,A1,A2,A10,A13
	RETS
ANIXY:
	MOVE	*A8(OIMG),A1,L
	MOVE	*A8(OSIZE),A2,L
	MOVE	*A8(OFLAGS),A4,W
	MOVE	*A1(IANIOFF),A6,L    ;PACKED X,Y OFFSETS 		
	CLR	A5		;MAKE SURE A7 IS 0
	MOVY	A6,A5
	ANDI	>0000FFFF,A6
	SRL	16,A5		;MOVE TO LOWER WORD
	MOVE	*A8(OXPOS),A3,W
	MOVE	*A8(OYPOS),A2,W
	ADD	A6,A3
	ADD	A5,A2
	RETS
;
PLYRXYTAB:
	.LONG	[-12,0],[12,0],[0,0],[0,-12],[0,12]
	.LONG	[-12,0],[12,0],[0,0],[0,-12],[0,12]
	.LONG	[-12,0],[12,0],[0,0],[0,-12],[0,12]
	.LONG	[-12,0],[12,0],[0,0],[0,-12],[0,12]
;
SEXPAND:
	.LONG	0,tail1,tail2,tail3,tail4,tail5,tail6,tail7,tail8,tail9
;
SLPTIME:
	.WORD	0,4,5,6,8,10,11,11,12,13,0
;
NEXPAND:
	.WORD	0,1,1,2,2,3,3,4,4,5,5
;
CARCTAB:
	.long	carc1,carc2,carc3,carc4
;
SMLEXP:	
	.LONG	EXPb1
	.WORD	NEWPALET|3
	.LONG	BULLET			;NEW PAL NAME
	.LONG	EXPb2
	.WORD	3
	.LONG	EXPb1
	.WORD	3
	.LONG	0	
MEDEXP:
	.LONG	EXPb1
	.WORD	NEWPALET|3
	.LONG	BULLET
	.LONG	EXPb2
	.WORD	4
	.LONG	EXPb3
	.WORD	4
	.LONG	EXPb4
	.WORD	4
	.LONG	EXPb5
	.WORD	4
	.LONG	EXPb6
	.WORD	4
	.LONG	EXPb7
	.WORD	4
	.LONG	EXPb6
	.WORD	4
	.LONG	EXPb5
	.WORD	4
	.LONG	EXPb4
	.WORD	4
	.LONG	EXPb3
	.WORD	4
	.LONG	EXPb2
	.WORD	4
	.LONG	EXPb1
	.WORD	4
	.LONG	0
	
BLDSPIL:
	.LONG	bldclt1
	.WORD	5
	.LONG	bldclt2
	.WORD	5
	.LONG	bldclt3
	.WORD	5
	.LONG	bldclt4
	.WORD	5
	.LONG	bldclt5
	.WORD	5
	.LONG	bldclt6
	.WORD	5
	.LONG	bldclt7
	.WORD	5
	.LONG	bldclt8
	.WORD	5
	.LONG	0

SEGEXP:	
	.LONG	EXPb1
	.WORD	NEWPALET|3
	.LONG	BULLET
	.LONG	EXPb2
	.WORD	3
	.LONG	EXPb3
	.WORD	3
	.LONG	EXPb4
	.WORD	3
	.LONG	EXPb5
	.WORD	3
	.LONG	EXPb6
	.WORD	3
	.LONG	0	
EXPHED:
	.LONG	EXPb1
	.WORD	NEWPALET|2
	.LONG	BULLET
	.LONG	EXPb2
	.WORD	3
	.LONG	EXPb3
	.WORD	3
	.LONG	EXPb4
	.WORD	4
	.LONG	EXPb5
	.WORD	4
	.LONG	EXPb6
	.WORD	5
	.LONG	EXPb7
	.WORD	5
	.LONG	EXPb8
	.WORD	4
	.LONG	EXPb9
	.WORD	4
	.LONG	0
SPITANI:
	.LONG	PODA
	.WORD	FLIPBITS|3,0
	.LONG	PODB
	.WORD	3
	.LONG	PODC
	.WORD	3
	.LONG	PODD
	.WORD	3
	.LONG	PODB
	.WORD	3
	.LONG	PODA
	.WORD	FLIPBITS|3,(M_FLIPH)
	.LONG	PODB
	.WORD	3
	.LONG	PODC
	.WORD	3
	.LONG	PODD
	.WORD	3
	.LONG	PODB
	.WORD	3
	.LONG	0
;
EGGANI:
	.LONG	tail1
	.WORD	3
	.LONG	tail2
	.WORD	3
	.LONG	tail3
	.WORD	3
	.LONG	tail4
	.WORD	3
	.LONG	tail5
	.WORD	3
	.LONG	tail6
	.WORD	3
	.LONG	tail5
	.WORD	3
	.LONG	tail4
	.WORD	3
	.LONG	tail3
	.WORD	3
	.LONG	tail2
	.WORD	3
	.LONG	0
;
METANI:
	.LONG	tail5
	.WORD	8
	.LONG	tail6
	.WORD	8
	.LONG	tail7
	.WORD	8
	.LONG	tail8
	.WORD	8
	.LONG	tail9
	.WORD	8
	.LONG	tail9
	.WORD	8
	.LONG	tail8
	.WORD	8
	.LONG	tail7
	.WORD	8
	.LONG	tail6
	.WORD	8
	.LONG	tail5
	.WORD	8
	.LONG	tail6
	.WORD	8
	.LONG	tail7
	.WORD	8
	.LONG	tail8
	.WORD	8
	.LONG	tail9
	.WORD	8
	.LONG	tail9
	.WORD	8
	.LONG	tail8
	.WORD	8
	.LONG	tail7
	.WORD	8
	.LONG	tail6
	.WORD	8
	.LONG	tail5
	.WORD	8
	.LONG	0
;
PODANI:
	.LONG	tail5
	.WORD	2
	.LONG	tail6
	.WORD	2
	.LONG	tail7
	.WORD	2
	.LONG	tail6
	.WORD	2   
	.LONG	tail5
	.WORD	2
	.LONG	tail4
	.WORD	2
	.LONG	0
;
;PROCESS TO FINALLY KILL OFF SNAKE!
EXPLDALL:
	MOVE	*A13(SNKPTR),A10,L
	MOVE	*A10,A0,L
	MOVE	*A0(OPLINK),A0,L
	CALLA	KILL
	MOVE	*A8(OPLINK),A0,L
	CALLA	KILL
	CLR	A0
	MOVE	A0,*A8(OXVEL),L
	MOVE	A0,*A8(OYVEL),L
	MOVI	CEXSND1,A0
	CALLA	ONESND
	MOVI	EXPHED,A9		
	MOVK	1,A1
	JSRP	FRANIM
	MOVE	A8,A0
	CALLA	DELOBJ
;
	ADDI	64,A10
	MOVI	NUMPCS-1,A11
ALLPCS:
	MOVE	*A10+,A8,L
	CREATE	EXPID,EXPLSEG
	SLEEP	4
	DSJS	A11,ALLPCS

WEXP:	SLEEP	1
	MOVI	EXPID,A0
	CLR	A1
	NOT	A1
	CALLA	EXISTP
	JRNZ	WEXP			;WAIT FOR ALL PIECES TO EXPLODE
	MOVI	CHSRPID,A0
	CALLA	EXISTP			;ANY MORE SNAKES ACTIVE?
	JRNZ	SEXIST			;SNAKE EXISTS DON'T KILL EVENT TIMER
	MOVI	STIMEPID,A0
	CALLA	KILALL
	CLR	A0
	MOVB	A0,@SNKDOOR		;RE-INIT RANDOM DOOR CODE
SEXIST:
	MOVI	PODPID,A0
	CLR	A1
	NOT	A1
	CALLA	EXISTP			;ANY MORE PODS ACTIVE?
	JRZ	PNONE			;SNAKE EXISTS DON'T KILL EVENT TIMER
;
;BLOW UP ALL EGGS/PODS ON SCREEN GIVING 5000 PNTS. FOR EACH  EGG
;0 PNTS. FOR EACH POD (ACTIVE SEEKER)
	MOVI	CEXSND1,A0
	CALLA	ONESND
	MOVK	1,A0
	MOVB	A0,@PODSTAT		;SET EXPLODE FLAG
	MOVI	30,A10
	CALLA	SHAKER
	SLEEP	20	   		;ALLOW ALL PROCESSES TO SEE FLAG
	CLR	A0
	MOVE	A0,@PODSTAT
PNONE:
	DIE
EXPLSEG:
	MOVE	*A8(OPLINK),A0,L
	CALLA	KILL			;KILL PIECES PROCESS
	CLR	A0
	MOVE	A0,*A8(OXVEL),L
	MOVE	A0,*A8(OYVEL),L
	MOVK	1,A1
	MOVI	SEGEXP,A9
	MOVI	BOMBSND,A0
	CALLA	ONESND
	JSRP	FRANIM
	MOVE	A8,A0
	CALLA	DELOBJ
	DIE
	.END
	MOVE	*A8(OPLINK),A0,L
	MOVE	*A0(SNKPTR),A1,L
	MOVB	*A0(SNKNUM),A0		;GET A10 STORED FOR THIS PROCESS

	SLL	5,A0			;PTR TO RAM TABLE ENTRY
	ADD	A1,A0
	CLR	A2
	MOVE	A2,*A0,L		;ZERO SK PTR

	ADDI	32,A1
	MOVI	NUMPCS,A2
	DEC	A2
LP	MOVE	*A1+,A0,L
	JRNE	NPA
	DSJS	A2,LP
	MOVE	@TRNUM,A0	
	DEC	A0
	MOVE	A0,@TRNUM
NPA	MMFM	SP,A1,A2
	
	CREATE	CHSRPID,PC_EXP
	MOVE	*A8(OPLINK),A0,L
	CALLA	KILL			;KILLS PROCESS IN A0

	MOVE	A8,A0	  
	CALLA	DELPAL			;NEEDED? NOT IF IN PLYR PAL!
	CALLA	DELOBJ
	RETS



